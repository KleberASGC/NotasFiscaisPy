Metadata-Version: 2.1
Name: nfelib
Version: 0.5
Summary: nfelib: electronic invoicing library for Brazil
Home-page: https://github.com/akretion/nfelib
Author: Raphael Valyi
Author-email: raphael.valyi@akretion.com
License: MIT
Description: [![Build Status](https://travis-ci.org/akretion/nfelib.svg?branch=master_gen_v4_00)](https://travis-ci.org/akretion/nfelib)
        
        [![nfelib](https://raw.githubusercontent.com/akretion/nfelib/master/ext/nfe.jpg)](https://github.com/akretion/nfelib/) by [![Akretion](https://raw.githubusercontent.com/akretion/nfelib/master/ext/akretion-logo2.png)](https://akretion.com/pt_BR)
        
        # nfelib Python Library
        
        A nfelib Ã© uma biblioteca para ler e gerir notas fiscais eletrÃ´nicas brasileiras (NFe's). A nfelib nÃ£o tem a pretensÃ£o de solucionar toda burocracia do SPED sozinha, mas foca apenas na questÃ£o do parsing e da geraÃ§Ã£o da NFe.
        
        * Para transmitir as NFe's para a receita, aconselhamos a biblioteca Python Zeep, ou entao por examplo https://github.com/erpbrasil/erpbrasil.edoc.
        * E para imprimir o DANFE, Ã© possivel usar https://github.com/erpbrasil/erpbrasil.edoc.pdf 
        
        Na Akretion queriamos algo modular, simples de se manter para usar com o ERP Odoo que adaptamos para as necessidades fiscais brasileiras. TambÃ©m criamos outras bibliotecas semelhantes para os outros documentos eletrÃ´nicos do SPED (e especialmente para NFS-e, MDFe, CTe, E-Social e SPED-Reinf, GNRE, BP-e).
        
        Durante anos usamos o https://github.com/aricaldeira/PySPED. PorÃ©m no PySPED, o autor partiu para escrever e manter manualmente **mais de 10 000 de linhas de cÃ³digo**, apenas nessa parte para montar o leiaute da NFe https://github.com/aricaldeira/PySPED/tree/master/pysped/nfe/leiaute. Mas isso ocasiona um custo de manutenÃ§Ã£o proibitivo a cada atualizaÃ§Ã£o dos esquemas sem falar que por se tratar de cÃ³digo manual tem vÃ¡rios erros com as TAGs pouco usadas e na Akretion cansamos de escrever patch na urgÃªncia no PySPED a cada vez que um cliente Odoo nosso nÃ£o consegue transmitir uma NF'e. Na verdade o equivalente dessas 10 000 linhas de cÃ³digo (anos de trabalho do autor) podem ser geradas por **esse Ãºnico comando** com a ferramenta [generateDS](http://www.davekuhlman.org/generateDS.html) usada por essa lib:
        
        ```bash
        generateDS -o leiauteNFe.py leiauteNFe_v4.00.xsd
        ```
        
        A nfelib permite de:
        
        * Gerir os XMLs dos documentos fiscais.
        * Validar os dados com **as mesmas validaÃ§Ãµes dos XSD's ao montar os objetos**, o que evita detectar os erros apenas ao transmitir o XML.
        * Importar XMLs e transforma-los em objetos Python. Usando um sistema de sub-classes, fica fÃ¡cil mapear esses objetos em outros objetos ou adicionar qualquer mÃ©todo customizado.
        
        A nfelib Ã©:
        
        * **Simples e confiÃ¡vel**. O cÃ³digo Ã© gerido pelo generateDS a partir dos XSD's da Fazenda. Ele **reflete exatamente a especificaÃ§Ã£o fiscal** da versÃ£o do esquema escolhida sem que vocÃª deva se perguntar qual Ã© o grau de aderÃªncia do cÃ³digo.
        * CompatÃ­vel com **Python 3** (e com Python 2 se botar patches no generateDS e usar uma versao anterior)
        * Capaz de carregar **vÃ¡rias versÃµes dos esquemas**. Isso pode ser bem Ãºtil ao receber uma nota fiscal com um leiaute antigo.
        
        AlÃ©m disso, usando outros recursos do GenerateDS, Ã© possÃ­vel ir alÃ©m dessa biblioteca nfelib e gerir automaticamente o modelo de dados do ERP pelo menos no ERP Odoo que tem um framework bastante poderoso. Sendo assim, Ã© possivel montar dinamicamente as telas do usuÃ¡rio, a geraÃ§Ã£o do XML ou a importaÃ§Ã£o do XML quase que sem escrever cÃ³digo (apenas relacionar os campos mapeados com os campos jÃ¡ existentes do ERP). Fica entÃ£o bem mais razoÃ¡vel para manter quando tem que atualizar os esquemas e assim tambÃ©m fica finalmente possÃ­vel manter os dados do SPED dentro do ERP com um custo de manutenÃ§Ã£o compatÃ­vel com o modelo open source.
        
        VocÃª pode aprender mais sobre o generateDS [aqui](http://www.davekuhlman.org/generateDS.html)
        
        # Como Instalar
        
        ```bash
        pip install git+https://github.com/akretion/nfelib
        ```
        # Gerir a lib novamente / processo de release
        **Muito importante:** as fonte estao mantido na branch **master**. Entao voce tem que fazer primeiro
        
        ```
        git checkout master
        ```
        
        Depois seria possÃ­vel rodar o generateDS manualmente em cada arquivo xsd do esquema que interessa. Porem Ã© interessante instalar essa pequena ferramenta https://github.com/akretion/erpbrasil.edoc.gen para automatizar as operaÃ§Ãµes. Depois da lib instalada (ela puxa o pacote GenerateDS), basta fazer:
        ```bash
        # Download dos esquemas de NFe do portal da Fazenda: https://www.nfe.fazenda.gov.br/portal/listaConteudo.aspx?tipoConteudo=/fwLvLUSmU8=
          
        # Pacote de LiberaÃ§Ã£o No. 9 (Novo leiaute da NF-e, NT 2019.001 v.1.20a). Publicado em 20/08/2019.
        erpbrasil-edoc-gen-download-schema -n nfe -v v4.00 -u https://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=vdxcmJ2AgTo=
        erpbrasil-edoc-gen-generate-python -n nfe -v v4.00 -i "retConsStatServ|retConsSitNFe|retEnviNFe|retConsReciNFe|retInutNFe" -d .
        
        # Pacote de LiberaÃ§Ã£o DistribuiÃ§Ã£o de DF-e v1.02 (Atualizado em 25/10/16)
        erpbrasil-edoc-gen-download-schema -n nfe -v v4.00 -u https://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=n3Kn9%20YZNak=
        erpbrasil-edoc-gen-generate-python -n nfe -v v4.00 -i "distDFeInt|retDistDFeInt" -d .
        
        # Pacote de LiberaÃ§Ã£o Evento Generico v1.01 (Atualizado em 30/05/2014)
        erpbrasil-edoc-gen-download-schema -n nfe -v v4.00 -u   http://hom.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=YaiBe2csOmA=
        erpbrasil-edoc-gen-generate-python -n nfe -v v4.00 -i "retEnvEvento" -d .
        
        # Pacote de LiberaÃ§Ã£o Evento Canc v1.01 (30/05/2014)
        erpbrasil-edoc-gen-download-schema -n nfe -v v4.00 -u  http://hom.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=MtjAJ1Rurjc=
        erpbrasil-edoc-gen-generate-python -n nfe -v v4.00 -i "retEnvEventoCancNFe" -d .
        
        # Pacote de LiberaÃ§Ã£o Evento CCe v1.01 (30/05/2014)
        erpbrasil-edoc-gen-download-schema -n nfe -v v4.00 -u https://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=P/FXaGiLKo0=
        erpbrasil-edoc-gen-generate-python -n nfe -v v4.00 -i "retEnvCCe" -d .
        
        # Pacote de LiberaÃ§Ã£o Evento Manifesta DestinatÃ¡rio v1.01 (30/05/2014)
        erpbrasil-edoc-gen-download-schema -n nfe -v v4.00 -u https://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=y2nVL6/GFlU=
        # mude o encoding desse arquivo xsd de iso-8859-1 para utf-8 e amaldiÃ§oe o cara que usou iso-8859-1
        iconv -f iso-8859-1 /tmp/generated/schemas/nfe/v4_00/retEnvConfRecebto_v1.00.xsd -t UTF-8 -o /tmp/generated/schemas/nfe/v4_00/retEnvConfRecebto_v1.00.xsd
        erpbrasil-edoc-gen-generate-python -n nfe -v v4.00 -i "retEnvConfRecebto" -d .
        ```
        Depois vocÃª pode olhar os arquivos Python geridos na pasta nfelib/v4_00/ e rodar os testes por examplo (`python3 -m pytest  tests -v`).
        
        Se vocÃª quiser criar uma nova versÃ£o do nfelib no Github, depois de gerir voce tem fazer um commit do README.md com a receita do bolo atualizada (essa parte) e dos testes atualizados.
        Depois voce tem que trocar de branch de novo para a branch onde fica o codigo gerido e gerir de novo:
        ```bash
        rm -r nfelib
        git checkout master_gen_v4_00
        git merge master -X theirs
        # gera de novo com o script acima (erpbrasil-edoc-gen-generate-python...)
        # roda os tests para ver se esta tudo OK
        python3 -m pytest  tests -v
        # copia os schemas, por examplo com
        rm -r schemas/nfe
        cp -r /tmp/generated/schemas/nfe schemas/nfe
        git add schemas
        git add nfelib
        # ai vc pode fazer um commit e um push com as mudanÃ§as (e 2 PRs para as branches master e master_gen_v4_00 eventualmente)
        ```
        
        # Rodar os testes
        
        ```bash
        python3 -m pytest  tests -v
        ```
        
        # Como Usar
        
        ```python
          # nfelib permite ler os dados de uma nota fiscal, por exemplo no formato 4.00:
          >>> from nfelib.v4_00 import leiauteNFe_sub as parser
          # vamos importar o XML da nota e transforma-lo em objeto Python:
          >>> nota = parser.parse(inputfile)
          # agora podemos trabalhar em cima do objeto e fazer operaÃ§oes como:
          >>> nota.infNFe.emit.CNPJ
          '03102552000172'
          >>> len(nota.infNFe.det)
          42
          # (a nota tem 42 linhas)
        
          # podemos tambem alterar os dados:
          nota.infNFe.emit.CNPJ = ...
        
          # e finalmente podemos exportar a nota num arquivo de novo por examplo
          >>> with open(filename, 'w') as f:
          >>>     parser.export(nota, nfeProc=False, stream=f)
        
        
          # nfelib tambÃ©m permite de montar o XML de uma nota fiscal com todas validaÃ§Ãµes dos XSDs jÃ¡ nos objetos:
          >>> from nfelib.v4_00 import leiauteNFe
          >>> enderEmit=leiauteNFe.TEnderEmi(xLgr='NKwaAJ5ZJ49aQYmqBvxMhBzkGUqvtXnqusGEtjDzKCXPGwrEZCS8LGKHyBbV',
          nro='11mzXHR8rZTgfE35EqfGhiShiIwQfLCAziFDXVgs3EjLSPkZkCvfGNLMEf5y',
          xCpl='Fr3gSvoAeKbGpQD3r98KFeB50P3Gq14XBVsv5fpiaBvJ3HTOpREiwYGs20Xw',
          xBairro='67LQFlXOBK0JqAE1rFi2CEyUGW5Z8QmmHhzmZ9GABVLKa9AbV0uFR0onl7nU',
          cMun='9999999',
          xMun='s1Cr2hWP6bptQ80A9vWBuTaODR1U82LtKQi1DEm3LsAXu9AbkSeCtfXJVTKG',
          UF='RS',
          CEP='88095550',
          cPais=1058,
          fone='12345678901324')
        
          # se tentar montar algum objeto com algum dado invÃ¡lido:
          >>> emitente=leiauteNFe.emitType(enderEmit=enderEmit, CPF='Brazil is a f*cking bureaucracy', xNome='Raphael', IE='12345678901234', IEST='84', IM='zjfBnFVG8TBq8iW', CNAE='0111111', CRT='3')
        >>> leiauteNFe.emitType(enderEmit=enderEmit, CPF='Brazil is a f*cking bureaucracy', xNome='Raphael', IE='12345678901234', IEST='84', IM='zjfBnFVG8TBq8iW', CNAE='0111111', CRT='3')
        /home/rvalyi/DEV/nfelib-edocs-gen/nfelib/v4_00/leiauteNFe.py:5821: UserWarning: Value "b'Brazil is a f*cking bureaucracy'" does not match xsd maxLength restriction on TCpf
          warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on TCpf' % {"value" : value.encode("utf-8")} )
        /home/rvalyi/DEV/nfelib-edocs-gen/nfelib/v4_00/leiauteNFe.py:5824: UserWarning: Value "b'Brazil is a f*cking bureaucracy'" does not match xsd pattern restrictions: [['^([0-9]{11})$']]
          warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_TCpf_patterns_, ))
        <nfelib.v4_00.leiauteNFe.emitType object at 0x7f623c4be748>
        
          # para gerir o XML:
          >>> import sys
          >>> emitente.export(sys.stdout, 0)
          <emitType>
            <CPF>12345678901</CPF>
            <xNome>Raphael</xNome>
            <enderEmit>
                <xLgr>NKwaAJ5ZJ49aQYmqBvxMhBzkGUqvtXnqusGEtjDzKCXPGwrEZCS8LGKHyBbV</xLgr>
                <nro>11mzXHR8rZTgfE35EqfGhiShiIwQfLCAziFDXVgs3EjLSPkZkCvfGNLMEf5y</nro>
                <xCpl>Fr3gSvoAeKbGpQD3r98KFeB50P3Gq14XBVsv5fpiaBvJ3HTOpREiwYGs20Xw</xCpl>
                <xBairro>67LQFlXOBK0JqAE1rFi2CEyUGW5Z8QmmHhzmZ9GABVLKa9AbV0uFR0onl7nU</xBairro>
                <cMun>9999999</cMun>
                <xMun>s1Cr2hWP6bptQ80A9vWBuTaODR1U82LtKQi1DEm3LsAXu9AbkSeCtfXJVTKG</xMun>
                <UF>RS</UF>
                <CEP>88095550</CEP>
                <cPais>1058</cPais>
                <fone>12345678901324</fone>
            </enderEmit>
            <IE>12345678901234</IE>
            <IEST>84</IEST>
            <IM>zjfBnFVG8TBq8iW</IM>
            <CNAE>0111111</CNAE>
            <CRT>3</CRT>
          </emitType>
        ```
        
        # Uso no ERP Odoo
        
        Para cada documento eletrÃ´nico para o qual existe esquema XSD's, a Akretion fez um repo Github com uma lib desse tipo.
        
        Mas fomos alÃ©m: eu tambem criei um gerador de modelos abstratos (mixins) Odoo, de forma que para os documentos fiscais complexos como a NFe vc tem um marshalling/unmarshalling automatico dos dados ate os modelos persistentes do ERP e se remapeando nos objetos nativos do Odoo https://github.com/akretion/generateds-odoo
        
Keywords: e-invoice NFe ERP Odoo
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Requires-Python: >=3.5
Description-Content-Type: text/markdown
